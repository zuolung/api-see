export default {
      tile: `Ts代码生成mock服务`,
      docs: `<h1>Ts代码生成mock服务</h1>
<div class="card"><h3 id="%E4%BB%8B%E7%BB%8D"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>介绍</h3>
<p>基于本地的ts文件生成mock服务</p>
<div class="code-box-max">
<div class="copy-code-btn"></div>
<pre><code class="language-bash">api-see watch --path src/action/typings --mock <span class="hljs-literal">true</span>
</code></pre>
</div>
</div><div class="card"><h3 id="%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%AD%97%E6%AE%B5"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>如何定义请求字段</h3>
<ul>
<li><code>普通注释</code>: 接口描述或字段描述</li>
<li><code>@url</code>: 请求路径</li>
<li><code>@timeout</code>: 接口延时返回 单位毫秒</li>
<li><code>@introduce</code>: 接口额外的详细介绍</li>
<li><code>@value</code>: 基础类型字段的固定 mock 数据, 可以使用 mockjs 规则,规则前缀<code>@</code>改为<code>#</code>,例如#title、#date('YYYY-MM-DD')</li>
<li><code>@rule</code>: mock 复杂数据的规则，例如：19-20，生成数组数组 19 条或者 20 条</li>
<li>更多 mock 配置，请查看<a href="https://www.jianshu.com/p/d812ce349265">mockjs</a></li>
</ul>
<p>支持外部定义公共类型，例如请求结构，分页数据接口都是可以提取出来，像分页数据可以公共设置为 数据<code>rule</code>19-20， total 总数为 39，随机数据取测试页面里的分页功能</p>
<p>支持外部定义公共类型，例如请求结构，分页数据接口都是可以提取出来，像分页数据可以公共设置为 数据rule19-20， total 总数为 39，随机数据取测试页面里的分页功能</p>
</div><div class="card"><h3 id="%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>代码案例</h3>
<div class="code-box-max">
<div class="copy-code-btn"></div>
<pre><code class="language-typescript"><span class="hljs-comment">/**
 * 获取用户列表信息
 * <span class="hljs-doctag">@url</span> /z/common/user/list
 * <span class="hljs-doctag">@introduce</span> 这是请求所有用户数据的接口
 * <span class="hljs-doctag">@timeout</span> 1000
 * <span class="hljs-doctag">@method</span> <span class="hljs-variable">GET</span>
 */</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">type</span> userInfo = {
  <span class="hljs-attr">request</span>: {
    <span class="hljs-comment">/**
     * 每页数据数量
     **/</span>
    <span class="hljs-attr">pageSize</span>: <span class="hljs-built_in">number</span>;
    <span class="hljs-comment">/**
     * 第几页
     **/</span>
    <span class="hljs-attr">pageNum</span>: <span class="hljs-built_in">number</span>;
  };
  <span class="hljs-attr">response</span>: {
    <span class="hljs-comment">/**
     * 成功
     **/</span>
    <span class="hljs-attr">success</span>: <span class="hljs-built_in">boolean</span>;
    <span class="hljs-attr">data</span>: {
      <span class="hljs-comment">/**
       * 用户总数
       * <span class="hljs-doctag">@value</span> 39
       **/</span>
      <span class="hljs-attr">total</span>: <span class="hljs-built_in">number</span>;
      <span class="hljs-comment">/**
       * 用户列表
       * <span class="hljs-doctag">@rule</span> 19-20
       **/</span>
      <span class="hljs-attr">list</span>: {
        <span class="hljs-comment">/**
         * 用户拥有的角色， 《注意字符需要双引号》
         * <span class="hljs-doctag">@value</span> [&quot;运营&quot;, &quot;HR&quot;, &quot;销售&quot;]
         **/</span>
        <span class="hljs-attr">roles</span>: <span class="hljs-built_in">string</span>[];
        <span class="hljs-comment">/**
         * 用户名称
         * <span class="hljs-doctag">@value</span> #title
         **/</span>
        <span class="hljs-attr">userName</span>: <span class="hljs-built_in">string</span>;
        <span class="hljs-comment">/**
         * 枚举值字符 《注意字符需要双引号》
         * <span class="hljs-doctag">@value</span> [&quot;状态1&quot;, &quot;状态2&quot;]
         **/</span>
        <span class="hljs-attr">someone</span>: <span class="hljs-built_in">string</span>;
        <span class="hljs-comment">/**
         * 枚举值数字
         * <span class="hljs-doctag">@value</span> [1, 2]
         **/</span>
        <span class="hljs-attr">someNum</span>: <span class="hljs-built_in">number</span>;
      }[];
    };
  };
};
</code></pre>
</div>
</div>`,
      h3Ids: `介绍:::如何定义请求字段:::代码案例`,
      codePath: []
    }