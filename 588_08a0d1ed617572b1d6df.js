"use strict";(self.webpackChunkapi_see=self.webpackChunkapi_see||[]).push([[588],{7588:(s,n,a)=>{a.r(n),a.d(n,{default:()=>l});const l={tile:"mock服务",docs:'<h1>mock服务</h1>\n<div class="card"><h3 id="%E4%BB%8B%E7%BB%8D"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>介绍</h3>\n<p>基于本地的ts文件生成mock服务</p>\n<div class="code-box-max">\n<div class="copy-code-btn"></div>\n<pre><code class="language-bash">api-see watch --path src/action/typings --mock <span class="hljs-literal">true</span>\n</code></pre>\n</div>\n</div><div class="card"><h3 id="%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%AD%97%E6%AE%B5"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>如何定义请求字段</h3>\n<ul>\n<li><code>@description</code>: 接口描述或字段描述</li>\n<li><code>@url</code>: 请求路径</li>\n<li><code>@timeout</code>: 接口延时返回 单位毫秒</li>\n<li><code>@introduce</code>: 接口额外的详细介绍</li>\n<li><code>@value</code>: 基础类型字段的固定 mock 数据, 可以使用 mockjs 规则,规则前缀<code>@</code>改为<code>#</code>,例如#title、#date(\'YYYY-MM-DD\')</li>\n<li><code>@rule</code>: mock 复杂数据的规则，例如：19-20，生成数组数组 19 条或者 20 条</li>\n<li>更多 mock 配置，请查看<a href="https://www.jianshu.com/p/d812ce349265">mockjs</a></li>\n</ul>\n<p>支持外部定义公共类型，例如请求结构，分页数据接口都是可以提取出来，像分页数据可以公共设置为 数据<code>rule</code>19-20， total 总数为 39，随机数据取测试页面里的分页功能</p>\n<blockquote>\n<p><code>@value</code>的优先级大于<code>@rule</code></p>\n</blockquote>\n</div><div class="card"><h3 id="mock%20%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE"><svg viewBox="0 0 1024 1024"  width="14" height="14"><path d="M491.054545 779.636364l-125.672727 125.672727c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-67.490909-67.490909-67.490909-179.2 0-246.690909l223.418182-223.418182c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c13.963636 13.963636 34.909091 13.963636 46.545455 0 13.963636-13.963636 13.963636-34.909091 0-46.545455-93.090909-93.090909-246.690909-93.090909-342.109091 0L69.818182 612.072727c-46.545455 46.545455-69.818182 107.054545-69.818182 169.890909C0 847.127273 25.6 907.636364 69.818182 954.181818c46.545455 46.545455 109.381818 69.818182 169.890909 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l125.672727-125.672727c13.963636-13.963636 13.963636-34.909091 0-46.545455-9.309091-16.290909-30.254545-16.290909-44.218182-2.327272z" p-id="2808"></path><path d="M954.181818 69.818182c-93.090909-93.090909-246.690909-93.090909-342.109091 0l-125.672727 125.672727c-13.963636 13.963636-13.963636 34.909091 0 46.545455 13.963636 13.963636 34.909091 13.963636 46.545455 0L658.618182 116.363636c32.581818-32.581818 76.8-51.2 123.345454-51.2s90.763636 18.618182 123.345455 51.2c67.490909 67.490909 67.490909 179.2 0 246.690909l-223.418182 223.418182c-32.581818 32.581818-76.8 51.2-123.345454 51.2s-90.763636-18.618182-123.345455-51.2c-13.963636-13.963636-34.909091-13.963636-46.545455 0-13.963636 13.963636-13.963636 34.909091 0 46.545455 46.545455 46.545455 109.381818 69.818182 169.89091 69.818182 62.836364 0 123.345455-23.272727 169.890909-69.818182l223.418181-223.418182c46.545455-46.545455 69.818182-107.054545 69.818182-169.890909C1024 176.872727 998.4 116.363636 954.181818 69.818182z" p-id="2809"></path></svg>mock 服务配置</h3>\n<p>api.config.js 文件下的 mock 属性, 前端定义接口通过<code>定义请求字段</code>的注释来 mock 数据或者拦截 mock 服务的方式，</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>描述</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>port</td>\n<td>mock 服务端口</td>\n<td><em>number</em></td>\n<td>10099</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>所有接口延时返回的时间</td>\n<td><em>number</em></td>\n<td>0</td>\n</tr>\n<tr>\n<td>baseIntercept</td>\n<td>拦截基本类型数据</td>\n<td><em>function</em></td>\n<td>--</td>\n</tr>\n<tr>\n<td>arrayRule</td>\n<td>拦截数组类型数据</td>\n<td><em>function</em></td>\n<td>--</td>\n</tr>\n</tbody>\n</table>\n<p>拦截基本类型数据<code>mock.baseIntercept</code>配置案例，<a href="https://www.jianshu.com/p/d812ce349265">建议按照 mockjs 字符、数字、布尔值 规则 返回</a>.</p>\n<p><strong>可以根据字段名称和名称去定义返回的数据</strong></p>\n<div class="code-box-max">\n<div class="copy-code-btn"></div>\n<pre><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">baseIntercept</span>(<span class="hljs-params">params</span>) {\n  <span class="hljs-comment">// type：string、number、boolean</span>\n  <span class="hljs-comment">// fieldName：字段名称</span>\n  <span class="hljs-comment">// originValue：原有值，swagger枚举类型、formatDate等或手动写的@value注释</span>\n  <span class="hljs-comment">// url：请求路径</span>\n  <span class="hljs-keyword">const</span> { type, fieldName, originValue, url } = params;\n  <span class="hljs-keyword">if</span> (originValue) <span class="hljs-keyword">return</span> originValue;\n\n  <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;string&quot;</span>) {\n    <span class="hljs-keyword">if</span> (fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;name&quot;</span>) || fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;Name&quot;</span>))\n      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;@cname&quot;</span>;\n    <span class="hljs-keyword">if</span> (fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;code&quot;</span>) || fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;Code&quot;</span>))\n      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;@word(4, 6)&quot;</span>;\n    <span class="hljs-keyword">if</span> (\n      fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;intro&quot;</span>) ||\n      fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;Intro&quot;</span>) ||\n      fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;Long&quot;</span>)\n    ) {\n      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;@cparagraph(1, 3)&quot;</span>;\n    }\n    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;@ctitle&quot;</span>;\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;number&quot;</span>) {\n    <span class="hljs-keyword">if</span> (fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;Id&quot;</span>) || fieldName.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;id&quot;</span>)) {\n      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;@integer(99, 100000)&quot;</span>;\n    }\n\n    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&quot;boolean&quot;</span>) {\n    <span class="hljs-keyword">if</span> (fieldName === <span class="hljs-string">&quot;success&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;\n    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.5</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;\n  }\n}\n</code></pre>\n</div>\n<p>拦截数组类型数据<code>mock.arrayRule</code>配置案例， <a href="https://www.jianshu.com/p/d812ce349265">建议按照 mockjs 数组 规则 返回</a></p>\n<div class="code-box-max">\n<div class="copy-code-btn"></div>\n<pre><code class="language-js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrayRule</span>(<span class="hljs-params">params</span>) {\n  <span class="hljs-keyword">const</span> { type, fieldName, url } = params;\n  <span class="hljs-comment">// 随机19-20条数组</span>\n  <span class="hljs-keyword">if</span> (fieldName === <span class="hljs-string">&quot;list&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;19-20&quot;</span>;\n}\n</code></pre>\n</div>\n</div>',h3Ids:"介绍:::如何定义请求字段:::mock 服务配置",codePath:[]}}}]);