"use strict";(self.webpackChunkapi_see=self.webpackChunkapi_see||[]).push([[916],{2916:(e,n,o)=>{o.r(n),o.d(n,{default:()=>t});const t={tile:"WelcometoyourVSCodeExtension",docs:'<h1>Welcome to your VS Code Extension</h1>\n<h2>What\'s in the folder</h2>\n<ul>\n<li>This folder contains all of the files necessary for your extension.</li>\n<li><code>package.json</code> - this is the manifest file in which you declare your extension and command.\n<ul>\n<li>The sample plugin registers a command and defines its title and command name. With this information VS Code can show the command in the command palette. It doesnâ€™t yet need to load the plugin.</li>\n</ul>\n</li>\n<li><code>extension.js</code> - this is the main file where you will provide the implementation of your command.\n<ul>\n<li>The file exports one function, <code>activate</code>, which is called the very first time your extension is activated (in this case by executing the command). Inside the <code>activate</code> function we call <code>registerCommand</code>.</li>\n<li>We pass the function containing the implementation of the command as the second parameter to <code>registerCommand</code>.</li>\n</ul>\n</li>\n</ul>\n<h2>Get up and running straight away</h2>\n<ul>\n<li>Press <code>F5</code> to open a new window with your extension loaded.</li>\n<li>Run your command from the command palette by pressing (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code> on Mac) and typing <code>Hello World</code>.</li>\n<li>Set breakpoints in your code inside <code>extension.js</code> to debug your extension.</li>\n<li>Find output from your extension in the debug console.</li>\n</ul>\n<h2>Make changes</h2>\n<ul>\n<li>You can relaunch the extension from the debug toolbar after changing code in <code>extension.js</code>.</li>\n<li>You can also reload (<code>Ctrl+R</code> or <code>Cmd+R</code> on Mac) the VS Code window with your extension to load your changes.</li>\n</ul>\n<h2>Explore the API</h2>\n<ul>\n<li>You can open the full set of our API when you open the file <code>node_modules/@types/vscode/index.d.ts</code>.</li>\n</ul>\n<h2>Run tests</h2>\n<ul>\n<li>Open the debug viewlet (<code>Ctrl+Shift+D</code> or <code>Cmd+Shift+D</code> on Mac) and from the launch configuration dropdown pick <code>Extension Tests</code>.</li>\n<li>Press <code>F5</code> to run the tests in a new window with your extension loaded.</li>\n<li>See the output of the test result in the debug console.</li>\n<li>Make changes to <code>src/test/suite/extension.test.js</code> or create new test files inside the <code>test/suite</code> folder.\n<ul>\n<li>The provided test runner will only consider files matching the name pattern <code>**.test.ts</code>.</li>\n<li>You can create folders inside the <code>test</code> folder to structure your tests any way you want.</li>\n</ul>\n</li>\n</ul>\n<h2>Go further</h2>\n<ul>\n<li><a href="https://code.visualstudio.com/api/ux-guidelines/overview">Follow UX guidelines</a> to create extensions that seamlessly integrate with VS Code\'s native interface and patterns.</li>\n<li><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">Publish your extension</a> on the VS Code extension marketplace.</li>\n<li>Automate builds by setting up <a href="https://code.visualstudio.com/api/working-with-extensions/continuous-integration">Continuous Integration</a>.</li>\n</ul>\n',h3Ids:"",codePath:[]}}}]);